{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialFilter","query","status","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","isQueryIncluded","title","toLowerCase","includes","trim","completed","length","className","map","id","classNames","onClick","currentTodoActions","TodoFilter","useState","inputValue","setInputValue","timeoutId","useRef","useEffect","window","clearTimeout","current","setTimeout","filterActions","onSubmit","event","preventDefault","onChange","e","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","then","fetch","res","json","TodoModal","isLoading","setIsLoading","user","setUser","userId","finally","href","email","name","App","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0bb04fc.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\n\nexport const actions = { setTodo, removeTodo };\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'query/SET',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'status/SET',\n  payload: Status,\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\ntype Filter = {\n  query: string,\n  status: Status,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\n\nconst initialFilter = {\n  query: '',\n  status: 'all' as Status,\n};\n\nconst filterReducer = (filter: Filter = initialFilter, action: Action) => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...filter, query: action.payload };\n    case 'status/SET':\n      return { ...filter, status: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport const actions = { setQuery, setStatus };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\ntype Action = SetTodosAction;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { setTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const { todos, currentTodo, filter } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const visibleTodos = todos.filter(todo => {\n    const isQueryIncluded = todo.title.toLowerCase().includes(filter.query.toLowerCase().trim());\n\n    switch (filter.status) {\n      case 'all':\n      default:\n        return isQueryIncluded;\n      case 'active':\n        return !todo.completed && isQueryIncluded;\n      case 'completed':\n        return todo.completed && isQueryIncluded;\n    }\n  });\n\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr\n                  key={id}\n                  data-cy=\"todo\"\n                  className={classNames({\n                    'has-background-info-light': id === currentTodo?.id,\n                  })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-danger': !completed,\n                        'has-text-success': completed,\n                      })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye': id !== currentTodo?.id,\n                            'fa-eye-slash': id === currentTodo?.id,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const [inputValue, setInputValue] = useState('');\n  const dispatch = useAppDispatch();\n  const timeoutId = useRef(0);\n\n  useEffect(() => {\n    window.clearTimeout(timeoutId.current);\n\n    timeoutId.current = window.setTimeout(\n      () => dispatch(filterActions.setQuery(inputValue)),\n      500,\n    );\n  }, [inputValue]);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => dispatch(\n              filterActions.setStatus(e.target.value as Status),\n            )}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {inputValue && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setInputValue('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (!currentTodo?.userId) {\n      return;\n    }\n\n    getUser(currentTodo.userId)\n      .then(setUser)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!currentTodo?.completed ? (\n                <strong className=\"has-text-danger\">Planned</strong>\n              ) : (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(todos => dispatch(todosActions.setTodos(todos)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!isLoading ? <TodoList /> : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}